function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 17-Dec-2017 01:23:27.
% 
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
% 
%   X = 2xTS cell, 2 inputs over TS timsteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
% 
%   Xi = 2x5 cell 2, initial 5 input delay states.
%   Each Xi{1,ts} = 3xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
% 
%   Ai = 2x0 cell 2, initial 5 layer delay states.
%   Each Ai{1,ts} = 12xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 2x5 cell 2, final 5 input delay states.
%   Each Xf{1,ts} = 3xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
% 
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 12xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [60;60;60];
  x1_step1_gain = [0.0050251256281407;0.00701754385964912;0.00930232558139535];
  x1_step1_ymin = -1;
  
  % Input 2
  x2_step1_xoffset = 5;
  x2_step1_gain = 0.00740740740740741;
  x2_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.5722022165201723;1.2886265437191147;-0.97827123140255667;-0.66788976428954927;-0.55740493839945648;-0.19579965473683322;0.1429743980490624;-0.42818934894058269;-0.74138659210087721;1.175056486896066;1.3481264706954208;1.5769805953940583];
  IW1_1 = [-0.45675970310474495 -0.30044792333559311 -0.54243461575693008 -0.48281352891839879 0.26834447128444822 -0.24379721402440163 0.52986801397842853 0.44291569062541314 -0.11609045229769165 -0.3282943216298681 0.33892726790957683 -0.0958630204994807 0.33922077184970889 0.38045206616016031 -0.33244859711532126;-0.53243133255458253 -0.24801274187214295 0.35429082698943209 -0.26129965926627308 -0.50616366622688158 -0.16193833239629668 0.02287258780635016 0.12717029710523262 0.47942599886537157 0.26562632151290255 0.25039337576969123 -0.46787525311225209 -0.21817938673094397 -0.45325547423300883 -0.35588675915311246;0.028396508985817519 -0.58770477458324899 -0.31590166671592751 0.20914585876168712 0.50245240574417671 0.23535560125144997 -0.40049815332950367 0.098076295090292046 -0.21602021259742762 0.53905537008845705 -0.224807342585195 0.034718443815647884 0.29385396892602689 -0.39587440566468129 0.21426963028711474;0.41658627650164465 -0.27536246223337407 -0.38457974666514255 0.12001721744096448 0.19172173904252715 -0.54295765360001258 0.48306439416579872 0.27578233434774807 0.40226665089300823 0.42676374493555308 0.30405754855188577 -0.38633964470163351 0.091707663360967404 0.23569483330562402 0.2828056909753644;0.24878180592041063 -0.10151451116576682 -0.12660128243803728 0.14901982313373852 -0.28361789761293121 0.40234640076427702 -0.089607471971829153 0.60095664582876118 -0.50991526213421801 0.38411492570185674 0.58228035662259336 -0.38491860517811943 -0.28644520770674514 -0.44752418721619508 -0.15396166293515462;0.052953460549480663 0.2236547309000563 -0.3078076239310083 -0.34681648164857282 0.27796131495217036 -0.30882688179295581 0.42935061176469391 0.44703476354625027 -0.23409361360789557 0.3766494569744579 0.31786547399894599 -0.22554363488799939 0.35528371350668914 0.27139975351610485 0.53952307436469438;0.15387252770837034 0.11607911218921753 -0.32562749114705636 -0.097526935165072867 -0.024092013606241421 0.38284023607519813 -0.22471282267910422 0.380407914881847 -0.088346740641271182 0.39017881104352153 0.50257769158353849 0.45271562738651766 0.41822059710447268 0.38950705203333474 -0.50116332710285094;-0.13633963158894247 0.32584306765633642 0.39404304135375839 -0.28585337741825539 0.48425875264734397 0.059864995325498674 0.39710893368801287 0.25382620907076198 -0.39771907107702764 0.52150133180976299 -0.45386209895182961 -0.38561790428513698 0.12440377129967914 -0.39024627923277527 -0.23184308374198181;-0.30117306669998462 0.40817935324320231 0.1749115499773006 0.41361170275868409 -0.24054574851532134 -0.049042638008683408 -0.48613787181490703 -0.1062222593421035 0.3050278955431594 -0.32170594723568952 0.49383268711457695 0.21900943810006995 0.40258395022637405 0.2739502915300191 0.16638235784791527;0.073854810563993761 0.44500414344444678 0.11522945304367184 0.27282065184868842 0.046601120461945492 -0.44991585290795777 -0.39076839620565784 -0.63941138660189034 -0.34799256100481413 0.095587545671767346 0.40744010564066463 -0.06385267974442918 0.02289539537697266 0.11465407867159366 -0.59512431377465558;0.15161507509948027 -0.48655894149297191 -0.20467830375880286 0.42874584849318786 -0.29402666254669346 -0.31842693645846393 0.28981293855436513 -0.30547099072735201 0.45512867430344717 -0.32358846367305022 0.27430177811127721 -0.40199907827037701 0.35163973879112409 0.011811638275500809 -0.44753785445145433;0.31858983016187897 0.027205171620954767 -0.51344806266384069 -0.11056972106525467 -0.46360462797765195 -0.13305497995523669 0.24964595435836298 -0.61807252298389681 -0.25686406256769273 -0.076510144972834565 -0.047082931822843441 -0.57724387055864246 -0.57507867646039512 0.56098239633007407 -0.32008081571796271];
  IW1_2 = [0.32933031846920147 0.022114208703916071 0.32695508410638535 -0.50611845650037945 -0.14671046297123935;0.48961084949038364 -0.25441214014204722 0.27067398973043871 0.557915281312926 0.17689418424834985;-0.65481603700889257 0.36594002980162899 0.29538929653404539 -0.28488970524513335 -0.313402544081476;-0.34205820578614488 0.3419258854402274 -0.50530816859119509 0.45539616839702801 0.16381381652571433;0.35946344284133924 0.41214923917876967 -0.38909541311714763 -0.060881851262593281 -0.18819516124111427;0.67079843976405151 0.34021069779609747 -0.072761353740337667 -0.53191830975665866 0.1289918956173117;0.51483421360497716 -0.24824631710222234 0.42789434306538426 -0.43033900511491624 -0.34636336776252608;0.11350963794267015 -0.55059089991607835 0.05862501178718757 -0.18236387671535087 0.54293718112184308;0.42457034697475088 -0.52287475614892265 -0.54055755976955711 -0.0024140646779790757 -0.39010901526189951;-0.31092109610038532 0.090458260749422897 0.44005579863145911 -0.12934087841492597 -0.44255821586927185;-0.2349829890390443 -0.12512898761832456 0.31846011409818126 -0.59141282744348111 0.29523204938502884;0.052740283905276533 0.11889113321527492 0.010947197471408121 0.26507179208889364 0.49289907842691238];
  
  % Layer 2
  b2 = 0.49095459510265738;
  LW2_1 = [-0.667351606276822 0.10530763711422061 -0.69003997946973505 -0.36980192815404811 0.60123610623587409 0.41040788644085024 -0.12062875202652246 -0.04857719837025086 -0.31399569243053693 -0.405494934926724 0.15318530991373872 -0.37372521612045528];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.00740740740740741;
  y1_step1_xoffset = 5;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  if (nargin < 2), error('Initial input states Xi argument needed.'); end
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  elseif ~isempty(Xi)
    Q = size(Xi{1},2);
  else
    Q = 0;
  end
  
  % Input 1 Delay States
  Xd1 = cell(1,6);
  for ts=1:5
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  end
  
  % Input 2 Delay States
  Xd2 = cell(1,6);
  for ts=1:5
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Rotating delay state position
    xdts = mod(ts+4,6)+1;
  
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5]-1,6)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2 3 4 5]-1,6)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  finalxts = TS+(1: 5);
  xits = finalxts(finalxts<=5);
  xts = finalxts(finalxts>5)-5;
  Xf = [Xi(:,xits) X(:,xts)];
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
